diff --git a/node_modules/react-native-sse/src/EventSource.js b/node_modules/react-native-sse/src/EventSource.js
index 6a7b146..fd0b3d5 100644
--- a/node_modules/react-native-sse/src/EventSource.js
+++ b/node_modules/react-native-sse/src/EventSource.js
@@ -36,7 +36,7 @@ class EventSource {
     this.debug = options.debug || false;
     this.interval = options.pollingInterval ?? 5000;
     this.lineEndingCharacter = options.lineEndingCharacter || null;
-
+    this.singleLine = false
     this._xhr = null;
     this._pollTimer = null;
     this._lastIndexProcessed = 0;
@@ -116,6 +116,7 @@ class EventSource {
 
           if (xhr.readyState === XMLHttpRequest.DONE) {
             this._logDebug('[EventSource][onreadystatechange][DONE] Operation done.');
+            this.close();
             this._pollAgain(this.interval, false);
           }
         } else if (xhr.status !== 0) {
@@ -194,7 +195,6 @@ class EventSource {
     if (indexOfDoubleNewline <= this._lastIndexProcessed) {
       return;
     }
-
     const parts = response.substring(this._lastIndexProcessed, indexOfDoubleNewline).split(this.lineEndingCharacter);
     this._lastIndexProcessed = indexOfDoubleNewline;
 
@@ -203,7 +203,16 @@ class EventSource {
     let data = [];
     let retry = 0;
     let line = '';
-
+    if(parts.length === 2 && parts[0].startsWith('{') && parts[0].includes('text-generation')) {
+      const data = JSON.parse(parts[0])
+      this.dispatch('message', {
+        type: 'message',
+        data: data.text,
+        url: this.url,
+        lastEventId: this.lastEventId,
+      })
+    } 
+    else
     for (let i = 0; i < parts.length; i++) {
       line = parts[i].trim();
       if (line.startsWith('event')) {
@@ -215,6 +224,7 @@ class EventSource {
         }
       } else if (line.startsWith('data')) {
         data.push(line.replace(/data:?\s*/, ''));
+        
       } else if (line.startsWith('id')) {
         id = line.replace(/id:?\s*/, '');
         if (id !== '') {
@@ -224,19 +234,24 @@ class EventSource {
         }
       } else if (line === '') {
         if (data.length > 0) {
-          const eventType = type || 'message';
+          let eventType = type
+          if(!eventType || eventType === 'content_block_delta') eventType = 'message'
           const event = {
             type: eventType,
             data: data.join('\n'),
             url: this.url,
             lastEventId: this.lastEventId,
           };
-
           this.dispatch(eventType, event);
-
           data = [];
           type = undefined;
         }
+      } else if(this.singleLine) {
+        try {
+          const e = JSON.parse(line)
+          // if a parse is successful, push the line
+          data.push(line)
+        } catch(e) {}
       }
     }
   }
@@ -254,13 +269,23 @@ class EventSource {
   _getLastDoubleNewlineIndex(response) {
     const doubleLineEndingCharacter = this.lineEndingCharacter + this.lineEndingCharacter;
     const lastIndex = response.lastIndexOf(doubleLineEndingCharacter);
-    if (lastIndex === -1) {
-      return -1;
+    if (lastIndex === -1 ) {
+      return this._getLastSingleNewlineIndex(response)
     }
-
     return lastIndex + doubleLineEndingCharacter.length;
   }
 
+  // This is needed for Ollama API jsonl style responses
+  _getLastSingleNewlineIndex(response) {
+    const singleLineEndingCharacter = this.lineEndingCharacter;
+    const lastIndex = response.lastIndexOf(singleLineEndingCharacter);
+    if (lastIndex === -1 ) {
+      return -1 
+    }
+    this.singleLine = true
+    return lastIndex + singleLineEndingCharacter.length;
+  }
+
   addEventListener(type, listener) {
     if (this.eventHandlers[type] === undefined) {
       this.eventHandlers[type] = [];
